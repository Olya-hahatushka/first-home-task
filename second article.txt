Командная строка
Есть много различных способов использования Git.
Помимо оригинального клиента, имеющего интерфейс командной строки,
существует множество клиентов с графическим пользовательским интерфейсом,
в той или иной степени реализующих функциональность Git.
В рамках данной книги мы будем использовать Git в командной строке.
С одной стороны, командная строка — это единственное место, где вы можете запустить все команды Git,
так как большинство клиентов с графическим интерфейсом реализуют для простоты
только некоторую часть функциональности Git. Если вы знаете, как выполнить какое-либо действие
в командной строке, вы, вероятно, сможете выяснить, как то же самое сделать и в GUI-версии,
а вот обратное не всегда верно. Кроме того, в то время, как выбор графического клиента —
это дело личного вкуса, инструменты командной строки доступны всем пользователям сразу после установки Git’а.

Поэтому мы предполагаем, что вы знаете, как открыть терминал в Mac или командную строку,
или Powershell в Windows. Если вам не понятно, о чем мы здесь говорим, то вам, возможно,
придётся ненадолго прерваться и изучить эти вопросы, чтобы вы могли понимать примеры и пояснения из этой книги.



СОЗДАНИЕ GIT-РЕПОЗИТОРИЯ

Создание Git-репозитория
Для создания Git-репозитория существуют два основных подхода. Первый подход — импорт в Git
уже существующего проекта или каталога. Второй — клонирование уже существующего репозитория с сервера.
Создание репозитория в существующем каталоге
Если вы собираетесь начать использовать Git для существующего проекта,
то вам необходимо перейти в проектный каталог и в командной строке ввести

$ git init

Эта команда создаёт в текущем каталоге новый подкаталог с именем .git содержащий
все необходимые файлы репозитория — основу Git-репозитория.
На этом этапе ваш проект ещё не находится под версионным контролем.
Если вы хотите добавить под версионный контроль существующие файлы
(в отличие от пустого каталога), вам стоит проиндексировать эти файлы и осуществить первую фиксацию изменений.
Осуществить это вы можете с помощью нескольких команд git add указывающих индексируемые файлы, а затем commit:

$ git add *.c
$ git add README
$ git commit -m 'initial project version'

Мы разберём, что делают эти команды чуть позже. На данном этапе, у вас есть Git-репозиторий с добавленными файлами и начальным коммитом.

Клонирование существующего репозитория
Если вы желаете получить копию существующего репозитория Git, например, проекта, в котором вы хотите поучаствовать,
то вам нужна команда git clone. Если вы знакомы с другими системами контроля версий, такими как Subversion, то заметите,
что команда называется clone, а не checkout. Это важное отличие — Git получает копию практически всех данных,
что есть на сервере. Каждая версия каждого файла из истории проекта забирается (pulled) с сервера, когда вы выполняете git clone.
Фактически, если серверный диск выйдет из строя, вы можете использовать любой из клонов на любом из клиентов,
для того чтобы вернуть сервер в то состояние, в котором он находился в момент клонирования
(вы можете потерять часть серверных перехватчиков (server-side hooks) и т.п., но все данные,
помещённые под версионный контроль, будут сохранены, подробнее см. в главе 4).
Клонирование репозитория осуществляется командой git clone [url]. Например, если вы хотите клонировать библиотеку Ruby Git,
известную как Grit, вы можете сделать это следующим образом:

$ git clone git://github.com/schacon/grit.git

Эта команда создаёт каталог с именем grit, инициализирует в нём каталог .git,
скачивает все данные для этого репозитория и создаёт (checks out) рабочую копию последней версии.
Если вы зайдёте в новый каталог grit, вы увидите в нём проектные файлы, пригодные для работы и использования.
Если вы хотите клонировать репозиторий в каталог, отличный от grit, можно это указать в следующем параметре командной строки:

$ git clone git://github.com/schacon/grit.git mygrit

Эта команда делает всё то же самое, что и предыдущая, только результирующий каталог будет назван mygrit.

В Git'е реализовано несколько транспортных протоколов, которые вы можете использовать.
В предыдущем примере использовался протокол git://, вы также можете встретить
http(s):// или user@server:/path.git, использующий протокол передачи SSH.